INPUT = 'boot_flash_uap.csv'
OUTPUT = 'boot_flash.bin'

require 'csv'

FAST_READ = /Fast Read\s+A=0x([A-F0-9]+)\s+bytes:(\d+)/

class FastRead
  attr_accessor :address
  attr_accessor :size
  attr_accessor :bytes

  def initialize(address, size)
    self.size = size.to_i
    self.address = address.to_i(16)
    self.bytes = []
  end

  def consume_byte(byte)
    self.bytes << byte.to_i(16) if self.bytes.size < self.size
  end

  def to_byte_string
    self.bytes.pack('c*')
  end
end

reads = []

last_match = nil
before_dummy = true

CSV.foreach(INPUT) do |row|
  fast_read = FAST_READ.match(row[4])
  if fast_read
    last_match = FastRead.new(fast_read[1], fast_read[2])
    reads << last_match
    before_dummy = true
  elsif row[4] == 'Dummy'
    before_dummy = false
  else
    last_match.consume_byte(row[4]) if last_match and !before_dummy
  end
end

output = File.open(OUTPUT, 'wb')
reads.each do |read|
  output.seek(read.address)
  output.write(read.to_byte_string)
end
output.close